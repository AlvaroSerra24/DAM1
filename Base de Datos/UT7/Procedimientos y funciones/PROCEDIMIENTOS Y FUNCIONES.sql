--SET SERVEROUTPUT ON       
--SET VERIFY OFF

/*
DECLARE
REGISTRO DEPART%ROWTYPE;
CON NUMBER(4);
PROCEDURE VER(REG DEPART%ROWTYPE) IS
BEGIN
DBMS_OUTPUT.PUT_LINE('--LOS DATOS PEDIDOS --');
DBMS_OUTPUT.PUT_LINE('NUM:'||TO_CHAR(REG.DEPT_NO));
DBMS_OUTPUT.PUT_LINE('NOMBRE:' || REG.DNOMBRE);
DBMS_OUTPUT.PUT_LINE('LOCALIDAD:' || REG.LOC);
END VER;
BEGIN
SELECT * INTO REGISTRO FROM DEPART WHERE DEPT_NO =
(SELECT DEPT_NO FROM EMPLE
GROUP BY DEPT_NO
HAVING COUNT(*)=(SELECT MAX(COUNT(*)) FROM EMPLE GROUP BY DEPT_NO) );
VER(REGISTRO);
END;


DECLARE 
REGISTRO DEPART%ROWTYPE;
BEGIN
SELECT * INTO REGISTRO FROM DEPART WHERE DEPT_NO=10;
    VER(REGISTRO);
END;

CREATE OR REPLACE PROCEDURE VER(REG DEPART%ROWTYPE) IS
BEGIN
DBMS_OUTPUT.PUT_LINE('--LOS DATOS PEDIDOS --');
DBMS_OUTPUT.PUT_LINE('NUM:'||TO_CHAR(REG.DEPT_NO));
DBMS_OUTPUT.PUT_LINE('NOMBRE:' || REG.DNOMBRE);
DBMS_OUTPUT.PUT_LINE('LOCALIDAD:' || REG.LOC);
END VER;
*/
/*
CREATE OR REPLACE 
PROCEDURE SALMAX ( NUM NUMBER, SAL_MAX OUT EMPLE.SALARIO%TYPE, 
                            N_MAX OUT EMPLE.APELLIDO%TYPE) IS
        NUDEP NUMBER(4);
BEGIN
    SELECT SALARIO, APELLIDO INTO SAL_MAX, N_MAX FROM EMPLE WHERE SALARIO = 
    (SELECT MAX(SALARIO) FROM EMPLE WHERE DEPT_NO=NUM) AND DEPT_NO=NUM;
EXCEPTION
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE(' EXISTEN VARIOS REGISTROS CON MAX SALARIO.');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO HAY DATOS DE ESE DEPARTAMENTO.');
END SALMAX;

DECLARE
        S_MAX EMPLE.SALARIO%TYPE ;
        NO_MAX EMPLE.APELLIDO%TYPE;
BEGIN
        SALMAX(&DEP,S_MAX,NO_MAX);
        IF S_MAX IS NOT NULL THEN
            DBMS_OUTPUT.PUT_LINE('SALARIO MÁXIMO='||TO_CHAR(S_MAX));
            DBMS_OUTPUT.PUT_LINE('NOMBRE MÁXIMO='||NO_MAX);
        END IF;
END;
*/
DECLARE
REGISTRO DEPART%ROWTYPE;
CON NUMBER(4);
PROCEDURE VER(REG DEPART%ROWTYPE) IS
BEGIN
DBMS_OUTPUT.PUT_LINE('----LOS DATOS PEDIDOS ----');
DBMS_OUTPUT.PUT_LINE('NUM:' || TO_CHAR(REG.DEPT_NO));
DBMS_OUTPUT.PUT_LINE('NOMBRE:' || REG.DNOMBRE);
DBMS_OUTPUT.PUT_LINE('LOCALIDAD:' || REG.LOC);
END VER;
BEGIN
SELECT * INTO REGISTRO FROM DEPART WHERE DEPT_NO =
(SELECT DEPT_NO FROM EMPLE GROUP BY DEPT_NO HAVING
COUNT(*)=(SELECT MAX(COUNT(*)) FROM EMPLE GROUP BY DEPT_NO) );
VER(REGISTRO);
END;
-- ESTE EJEMPLO INSERTA UN NUEVO REGISTRO EN EMPLE
-- UTILIZA UNA PROCEDURE QUE RECIBE LOS DATOS A INSERTAR.
DECLARE
REGISTRO EMPLE%ROWTYPE;
PROCEDURE INSERTAR(REG EMPLE%ROWTYPE)
IS
BEGIN
INSERT INTO EMPLE VALUES (REG.EMP_NO,
REG.APELLIDO, REG.OFICIO, REG.DIR,
REG.FECHA_ALT, REG.SALARIO, REG.COMISION,
REG.DEPT_NO);
END INSERTAR;
BEGIN
REGISTRO.EMP_NO:=&NUMERO_EMPLE;
REGISTRO.APELLIDO:='&NOMBRE_EMPLE';
REGISTRO.OFICIO:='&OFICIO_EMPLE';
REGISTRO.DIR:=&NUMERO_DIRECTOR;
REGISTRO.FECHA_ALT:=SYSDATE;
REGISTRO.SALARIO:=12000;
REGISTRO.COMISION:=0;
REGISTRO.DEPT_NO:=20;
INSERTAR(REGISTRO);
END;
/*EJEMPLO QUE UTILIZA UNA FUNCIÓN PARA MODIFICAR EL SUELDO DE LOS EMPLEADOS CON
OFICIO EMPLEADO, EL SUELDO SE SUBIRÁ UN 15 %. LA FUNCIÓN RECIBE EL SUELDO Y DEVUELVE EL
SUELDO NUEVO. PROBAR QUÉ OCURRE */
DECLARE
REGISTRO EMPLE%ROWTYPE;
NUSUEL EMPLE.SALARIO%TYPE;
FUNCTION NUEVSUEL (SUELDO EMPLE.SALARIO%TYPE)
RETURN EMPLE.SALARIO%TYPE
IS
NUEVOSUELDO EMPLE.SALARIO%TYPE;
BEGIN
NUEVOSUELDO:=SUELDO+0.15*SUELDO;
RETURN NUEVOSUELDO;
END NUEVSUEL;
BEGIN
UPDATE EMPLE SET SALARIO=NUEVSUEL(SALARIO)
WHERE OFICIO='EMPLEADO';
/* ESTA LLAMADA DA ERROR PUES LA FUNCIÓN DEBE DE ESTAR CREADA Y ALMACENADA EN LA
BASE DE DATOS */
DBMS_OUTPUT.PUT_LINE('SE HAN ACTUALIZADO : ' ||SQL%ROWCOUNT);
END;
-- PARA VERLO
SELECT * FROM EMPLE WHERE OFICIO='EMPLEADO';
I.E.